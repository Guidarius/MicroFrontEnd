'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = observe;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _BehaviorSubject = require('rxjs/BehaviorSubject');

var _composeHandlers = require('frint-component-utils/lib/composeHandlers');

var _composeHandlers2 = _interopRequireDefault(_composeHandlers);

var _ObserveHandler = require('frint-component-handlers/lib/ObserveHandler');

var _ObserveHandler2 = _interopRequireDefault(_ObserveHandler);

var _ReactHandler = require('../handlers/ReactHandler');

var _ReactHandler2 = _interopRequireDefault(_ReactHandler);

var _isObservable = require('../isObservable');

var _isObservable2 = _interopRequireDefault(_isObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable import/no-extraneous-dependencies */


function observe(fn) {
  return function (Component) {
    var WrappedComponent = function (_React$Component) {
      _inherits(WrappedComponent, _React$Component);

      function WrappedComponent(props, context) {
        _classCallCheck(this, WrappedComponent);

        var _this = _possibleConstructorReturn(this, (WrappedComponent.__proto__ || Object.getPrototypeOf(WrappedComponent)).call(this, props, context));

        _this._props$ = new _BehaviorSubject.BehaviorSubject(_this.props);

        var output = typeof fn === 'function' ? fn(context.app, _this._props$) : {};

        if (!(0, _isObservable2.default)(output)) {
          // sync
          _this.state = {
            computedProps: output
          };

          return _possibleConstructorReturn(_this);
        }

        // async
        _this._handler = (0, _composeHandlers2.default)(_ReactHandler2.default, _ObserveHandler2.default, {
          component: _this,
          getProps$: function getProps$() {
            return output;
          }
        });

        _this.state = _this._handler.getInitialData();
        return _this;
      }

      _createClass(WrappedComponent, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          if (this._handler) {
            this._handler.app = this.context.app;
            this._handler.beforeMount();
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(newProps) {
          if (this._handler) {
            this._props$.next(newProps);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          if (this._handler) {
            this._handler.beforeDestroy();
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var computedProps = this.state.computedProps;


          return _react2.default.createElement(Component, _extends({}, computedProps, this.props));
        }
      }]);

      return WrappedComponent;
    }(_react2.default.Component);

    WrappedComponent.displayName = typeof Component.displayName !== 'undefined' ? 'observe(' + Component.displayName + ')' : 'observe';
    WrappedComponent.contextTypes = {
      app: _propTypes2.default.object.isRequired
    };


    return WrappedComponent;
  };
}
module.exports = exports['default'];