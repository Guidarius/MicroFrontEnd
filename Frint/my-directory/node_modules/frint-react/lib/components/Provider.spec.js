'use strict';

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

var _Provider = require('./Provider');

var _Provider2 = _interopRequireDefault(_Provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global afterEach, beforeEach, describe, it */
var sandbox = _sinon2.default.sandbox.create();
_chai2.default.use(_sinonChai2.default);

describe('frint-react › components › Provider', function () {
  var fakeApp = {};
  var fakeChildren = _react2.default.createElement('div', { id: 'myFakeChildren' });
  var myProviderInstance = void 0;

  beforeEach(function () {
    sandbox.spy(_react.Children, 'only');
    myProviderInstance = new _Provider2.default({
      app: fakeApp,
      children: fakeChildren
    });
  });

  afterEach(function () {
    sandbox.restore();
  });

  it('extends React.Component', function () {
    (0, _chai.expect)(Object.getPrototypeOf(_Provider2.default)).to.be.equal(_react.Component);
  });

  it('has static propTypes defined', function () {
    (0, _chai.expect)(_Provider2.default.propTypes).to.be.deep.equal({
      app: _propTypes2.default.object.isRequired,
      children: _propTypes2.default.element.isRequired
    });
  });

  it('has static childContextTypes defined', function () {
    (0, _chai.expect)(_Provider2.default.childContextTypes).to.be.deep.equal({
      app: _propTypes2.default.object.isRequired
    });
  });

  it('has the app as private property, just like the passed arguments', function () {
    (0, _chai.expect)(myProviderInstance.app).to.be.deep.equal(fakeApp);
  });

  it('has a getChildContext method which returns app object of the instance', function () {
    (0, _chai.expect)(myProviderInstance.getChildContext()).to.be.deep.equal({
      app: fakeApp
    });
  });

  it('calls React.Children.only() with the props.children provided, on render', function () {
    myProviderInstance.render();
    (0, _chai.expect)(_react.Children.only).to.be.callCount(1).and.to.be.calledWith(fakeChildren);
  });
});