'use strict';

var _chai = require('chai');

var _rxjs = require('rxjs');

var _streamProps = require('./streamProps');

var _streamProps2 = _interopRequireDefault(_streamProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('frint-react â€º streamProps', function () {
  it('is a function', function () {
    (0, _chai.expect)(_streamProps2.default).to.be.a('function');
  });

  it('streams with default object', function (done) {
    var streamer = (0, _streamProps2.default)({
      key: 'value'
    });

    streamer.get$().subscribe(function (props) {
      (0, _chai.expect)(props).to.deep.equal({
        key: 'value'
      });

      done();
    });
  });

  it('streams plain object, by merging with default', function (done) {
    var streamer = (0, _streamProps2.default)({
      key: 'value',
      key2: 'value2'
    });

    streamer.set({
      key2: 'value2 overridden',
      key3: 'value3'
    });

    streamer.get$().last().subscribe(function (props) {
      (0, _chai.expect)(props).to.deep.equal({
        key: 'value',
        key2: 'value2 overridden',
        key3: 'value3'
      });

      done();
    });
  });

  it('streams key/value pairs, by merging with default', function (done) {
    var streamer = (0, _streamProps2.default)({
      key: 'value'
    });

    streamer.set('key2', 'value2 overridden');
    streamer.set('key3', 'value3');

    streamer.get$().last().subscribe(function (props) {
      (0, _chai.expect)(props).to.deep.equal({
        key: 'value',
        key2: 'value2 overridden',
        key3: 'value3'
      });

      done();
    });
  });

  it('streams multiple observables with mappings, by merging with default', function (done) {
    var streamer = (0, _streamProps2.default)({
      key: 'value'
    });

    var names$ = _rxjs.Observable.of('Fahad', 'Ricardo', 'Mark', 'Jean', 'Alex' // last one wins
    );
    var numbers$ = _rxjs.Observable.of(1, 2, 3 // last one wins
    );

    streamer.set(names$, function (name) {
      return { name: name };
    } // final plain object
    );

    streamer.set(numbers$, function (number) {
      return number * 2;
    }, // direct mapped values
    function (number) {
      return _rxjs.Observable.of(number);
    }, // even mapped observables
    function (number) {
      return { number: number };
    } // final plain object
    );

    streamer.get$().last().subscribe(function (props) {
      (0, _chai.expect)(props).to.deep.equal({
        key: 'value',
        name: 'Alex',
        number: 6 });

      done();
    });
  });

  it('steams dispatchable actions against store', function (done) {
    var streamer = (0, _streamProps2.default)();
    var dispatchedPayload = void 0;

    var fakeStore = {
      dispatch: function dispatch(payload) {
        dispatchedPayload = payload;
      }
    };

    function myActionCreator(value) {
      return {
        type: 'MY_ACTION_TYPE',
        value: value
      };
    }

    streamer.setDispatch({ myAction: myActionCreator }, fakeStore);

    streamer.get$().last().subscribe(function (props) {
      props.myAction('someValue');

      (0, _chai.expect)(dispatchedPayload).to.deep.equal({
        type: 'MY_ACTION_TYPE',
        value: 'someValue'
      });

      done();
    });
  });

  it('has no impact if unexpected values are set', function (done) {
    var streamer = (0, _streamProps2.default)({
      key: 'value'
    });

    streamer.set(function () {
      return 'blah';
    });

    streamer.get$().subscribe(function (props) {
      (0, _chai.expect)(props).to.deep.equal({
        key: 'value'
      });

      done();
    });
  });
}); /* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */