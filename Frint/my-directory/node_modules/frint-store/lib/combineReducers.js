'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = combineReducers;
/* eslint-disable prefer-template */
function combineReducers(reducers) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var keys = Object.keys(reducers);
  var opts = _extends({
    console: console
  }, options);

  return function rootReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    var changed = false;

    var fullStateTree = {};
    keys.forEach(function processReducer(key) {
      var reducer = reducers[key];
      var previousState = state[key];
      var updatedState = void 0;

      try {
        updatedState = reducer(previousState, action);
      } catch (reducerError) {
        opts.console.error('Reducer for key `' + key + '` threw an error:');
        throw reducerError;
      }

      if (typeof updatedState === 'undefined') {
        throw new Error('Reducer for key `' + key + '` returned `undefined`');
      }

      fullStateTree[key] = updatedState;

      if (changed === true || updatedState !== previousState) {
        changed = true;
      }
    });

    return changed ? fullStateTree : state;
  };
}
module.exports = exports['default'];