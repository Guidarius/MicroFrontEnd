'use strict';

var _chai = require('chai');

var _combineReducers = require('./combineReducers');

var _combineReducers2 = _interopRequireDefault(_combineReducers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */
describe('frint-store â€º combineReducers', function () {
  function counterReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { value: 0 };
    var action = arguments[1];

    switch (action.type) {
      case 'INCREMENT_COUNTER':
        return Object.assign({}, {
          value: state.value + 1
        });
      case 'DECREMENT_COUNTER':
        return Object.assign({}, {
          value: state.value - 1
        });
      default:
        return state;
    }
  }

  function colorReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { value: 'blue' };
    var action = arguments[1];

    switch (action.type) {
      case 'SET_COLOR':
        return Object.assign({}, {
          value: action.color
        });
      default:
        return state;
    }
  }

  function buggyReducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    switch (action.type) {
      case 'DO_ERROR':
        throw new Error('I am an Error from buggy');
      case 'DO_UNDEFINED':
        return undefined;
      default:
        return state;
    }
  }

  it('combines multiple reducers', function () {
    var rootReducer = (0, _combineReducers2.default)({
      counter: counterReducer,
      color: colorReducer
    });

    var initialState = {
      counter: { value: 100 },
      color: { value: 'red' }
    };

    var states = [];
    states.push(rootReducer(initialState, { type: 'DO_NOTHING' }));

    states.push(rootReducer(states[states.length - 1], { type: 'INCREMENT_COUNTER' }));
    states.push(rootReducer(states[states.length - 1], { type: 'INCREMENT_COUNTER' }));
    states.push(rootReducer(states[states.length - 1], { type: 'DECREMENT_COUNTER' }));
    states.push(rootReducer(states[states.length - 1], { type: 'SET_COLOR', color: 'blue' }));

    (0, _chai.expect)(states).to.deep.equal([{ counter: { value: 100 }, color: { value: 'red' } }, { counter: { value: 101 }, color: { value: 'red' } }, { counter: { value: 102 }, color: { value: 'red' } }, { counter: { value: 101 }, color: { value: 'red' } }, { counter: { value: 101 }, color: { value: 'blue' } }]);
  });

  it('combines multiple reducers with no given initial state', function () {
    var rootReducer = (0, _combineReducers2.default)({
      counter: counterReducer,
      color: colorReducer
    });
    var state = rootReducer(undefined, { type: 'DO_NOTHING' });

    (0, _chai.expect)(state).to.deep.equal({
      counter: {
        value: 0
      },
      color: {
        value: 'blue'
      }
    });
  });

  it('throws error with reducer key name, when individual reducer errors', function () {
    var consoleCalls = [];
    var fakeConsole = {
      error: function error() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        consoleCalls.push({
          method: 'error',
          args: args
        });
      }
    };

    var rootReducer = (0, _combineReducers2.default)({
      counter: counterReducer,
      color: colorReducer,
      buggy: buggyReducer
    }, {
      console: fakeConsole
    });

    var initialState = {
      counter: { value: 100 },
      color: { value: 'red' }
    };

    var states = [];
    states.push(rootReducer(initialState, { type: '__INITIAL__' }));

    states.push(rootReducer(states[states.length - 1], { type: 'INCREMENT_COUNTER' }));
    states.push(rootReducer(states[states.length - 1], { type: 'SET_COLOR', color: 'blue' }));

    (0, _chai.expect)(states).to.deep.equal([{ counter: { value: 100 }, color: { value: 'red' }, buggy: {} }, { counter: { value: 101 }, color: { value: 'red' }, buggy: {} }, { counter: { value: 101 }, color: { value: 'blue' }, buggy: {} }]);

    (0, _chai.expect)(function () {
      return rootReducer(states[states.length - 1], { type: 'DO_ERROR' });
    }).to.throw(/I am an Error from buggy/);
    (0, _chai.expect)(consoleCalls.length).to.equal(1);
    (0, _chai.expect)(consoleCalls[0]).to.deep.equal({
      method: 'error',
      args: ['Reducer for key `buggy` threw an error:']
    });

    (0, _chai.expect)(function () {
      return rootReducer(states[states.length - 1], { type: 'DO_UNDEFINED' });
    }).to.throw(/Reducer for key `buggy` returned `undefined`/);
  });
});