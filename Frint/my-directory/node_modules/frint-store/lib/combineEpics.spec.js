'use strict';

var _chai = require('chai');

var _Subject = require('rxjs/Subject');

var _filter = require('rxjs/operator/filter');

var _map = require('rxjs/operator/map');

var _combineEpics = require('./combineEpics');

var _combineEpics2 = _interopRequireDefault(_combineEpics);

var _ActionsObservable = require('./ActionsObservable');

var _ActionsObservable2 = _interopRequireDefault(_ActionsObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */
describe('frint-store â€º combineEpics', function () {
  it('triggers epics correct response', function () {
    var pingEpic = function pingEpic(action$) {
      var _context;

      return (_context = _filter.filter.call(action$, function (action) {
        return action.type === 'PING';
      }), _map.map).call(_context, function () {
        return { type: 'PONG' };
      });
    };

    var rootEpic = (0, _combineEpics2.default)(pingEpic);

    var subject$ = new _Subject.Subject();
    var actions$ = new _ActionsObservable2.default(subject$);
    var result$ = rootEpic(actions$);
    var emittedActions = [];

    var subscription = result$.subscribe(function (emittedAction) {
      emittedActions.push(emittedAction);
    });
    subject$.next({ type: 'PING' });

    (0, _chai.expect)(emittedActions).to.deep.equal([{ type: 'PONG' }]);

    subscription.unsubscribe();
  });
});