'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-console */


var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _padStart = require('lodash/padStart');

var _padStart2 = _interopRequireDefault(_padStart);

var _Subject = require('rxjs/Subject');

var _BehaviorSubject = require('rxjs/BehaviorSubject');

var _map = require('rxjs/operator/map');

var _switchMap = require('rxjs/operator/switchMap');

var _scan = require('rxjs/operator/scan');

var _ActionsObservable = require('./ActionsObservable');

var _ActionsObservable2 = _interopRequireDefault(_ActionsObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Store() {
  var _context,
      _this = this;

  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.options = _extends({
    initialState: undefined,
    deps: null,
    appendAction: false,
    reducer: function reducer(state) {
      return state;
    },
    epic: null,
    enableLogger: true,
    console: console
  }, options);

  this.internalState$ = (_context = new _BehaviorSubject.BehaviorSubject(this.options.initialState), _scan.scan).call(_context, function (previousState, action) {
    var updatedState = void 0;
    var d = new Date();
    var prettyDate = [(0, _padStart2.default)(d.getHours(), 2, 0), ':', (0, _padStart2.default)(d.getMinutes(), 2, 0), ':', (0, _padStart2.default)(d.getSeconds(), 2, 0), '.', (0, _padStart2.default)(d.getMilliseconds(), 3, 0)].join('');

    try {
      updatedState = _this.options.reducer(previousState, action);
    } catch (error) {
      if (action && action.type) {
        _this.options.console.error('Error processing @ ' + prettyDate + ' ' + action.type + ':');
      }
      _this.options.console.error(error);

      return previousState;
    }

    // logger in non-production mode only
    if (process.env.NODE_ENV !== 'production') {
      if (_this.options.enableLogger === true) {
        var groupName = 'action @ ' + prettyDate + ' ' + action.type;

        if (typeof _this.options.console.group === 'function') {
          _this.options.console.group(groupName);
        }

        _this.options.console.log('%cprevious state', 'color: #9e9e9e; font-weight: bold;', previousState);
        _this.options.console.log('%caction', 'color: #33c3f0; font-weight: bold;', action);
        _this.options.console.log('%ccurrent state', 'color: #4cAf50; font-weight: bold;', updatedState);

        if (typeof _this.options.console.groupEnd === 'function') {
          _this.options.console.groupEnd();
        }
      }
    }

    return updatedState;
  });
  this.exposedState$ = new _BehaviorSubject.BehaviorSubject();

  this.cachedState = Object.assign({}, this.options.initialState);
  this.subscription = this.internalState$.subscribe(function (state) {
    _this.cachedState = state;
    _this.exposedState$.next(state);
  });

  this.getState = this.getState.bind(this);
  this.dispatch = this.dispatch.bind(this);

  // for epic
  this._input$ = null;
  this._action$ = null;
  this._epic$ = null;
  this._epicSubscription = null;

  if (this.options.epic) {
    var _context2;

    this._input$ = new _Subject.Subject();
    this._action$ = new _ActionsObservable2.default(this._input$);
    this._epic$ = new _Subject.Subject();

    this._epicSubscription = (_context2 = (_context2 = this._epic$, _map.map).call(_context2, function (epic) {
      return epic(_this._action$, _this, _this.options.deps);
    }), _switchMap.switchMap).call(_context2, function (output$) {
      return output$;
    }).subscribe(this.dispatch);

    this._epic$.next(this.options.epic);
  }

  this.dispatch({ type: '__FRINT_INIT__' });
}

Store.prototype.getState$ = function getState$() {
  return this.exposedState$;
};

Store.prototype.getState = function getState() {
  return this.cachedState;
};

Store.prototype.dispatch = function dispatch(action) {
  if (typeof action === 'function') {
    return action(this.dispatch, this.getState, this.options.deps);
  }

  var payload = this.options.appendAction && (0, _isPlainObject2.default)(this.options.appendAction) ? _extends({}, this.options.appendAction, action) : action;
  var result = this.internalState$.next(payload);

  if (this.options.epic) {
    this._input$.next(payload);
  }

  return result;
};

Store.prototype.destroy = function destroy() {
  if (this.subscription) {
    this.subscription.unsubscribe();
  }

  if (this._epicSubscription) {
    this._epicSubscription.unsubscribe();
  }
};

exports.default = Store;
module.exports = exports['default'];