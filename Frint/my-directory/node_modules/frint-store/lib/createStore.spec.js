'use strict';

var _chai = require('chai');

var _filter = require('rxjs/operator/filter');

var _delay = require('rxjs/operator/delay');

var _map = require('rxjs/operator/map');

var _take = require('rxjs/operator/take');

var _last = require('rxjs/operator/last');

var _scan = require('rxjs/operator/scan');

var _createStore = require('./createStore');

var _createStore2 = _interopRequireDefault(_createStore);

var _combineReducers = require('./combineReducers');

var _combineReducers2 = _interopRequireDefault(_combineReducers);

var _combineEpics = require('./combineEpics');

var _combineEpics2 = _interopRequireDefault(_combineEpics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */
describe('frint-store â€º createStore', function () {
  it('returns function', function () {
    var Store = (0, _createStore2.default)();
    (0, _chai.expect)(Store).to.be.a('function');
  });

  it('returns initial state upon subscription', function () {
    var Store = (0, _createStore2.default)();
    var store = new Store({
      enableLogger: false,
      initialState: {
        ok: true
      }
    });

    var subscription = store.getState$().subscribe(function (state) {
      (0, _chai.expect)(state).to.deep.equal({
        ok: true
      });
    });

    subscription.unsubscribe();
  });

  it('dispatches actions, that update state', function () {
    var Store = (0, _createStore2.default)({
      enableLogger: false,
      initialState: {
        counter: 0
      },
      reducer: function reducer(state, action) {
        switch (action.type) {
          case 'INCREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter + 1
            });
          case 'DECREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter - 1
            });
          default:
            return state;
        }
      }
    });
    var store = new Store();

    var states = [];
    var subscription = store.getState$().subscribe(function (state) {
      states.push(state);
    });

    store.dispatch({ type: 'INCREMENT_COUNTER' });
    store.dispatch({ type: 'INCREMENT_COUNTER' });
    store.dispatch({ type: 'DECREMENT_COUNTER' });

    (0, _chai.expect)(states.length).to.equal(4); // 1 initial + 3 dispatches

    var lastState = states[states.length - 1];
    (0, _chai.expect)(lastState).to.deep.equal({
      counter: 1
    });

    var synchronousState = store.getState();
    (0, _chai.expect)(synchronousState).to.deep.equal({
      counter: 1
    });

    subscription.unsubscribe();
  });

  it('appends to action payload', function () {
    var actions = [];
    var Store = (0, _createStore2.default)({
      enableLogger: false,
      appendAction: {
        appName: 'Blah'
      },
      initialState: {
        counter: 0
      },
      reducer: function reducer(state, action) {
        actions.push(action);

        return state;
      }
    });

    var store = new Store();

    var states = [];
    var subscription = store.getState$().subscribe(function (state) {
      states.push(state);
    });

    store.dispatch({ type: 'INCREMENT_COUNTER' });

    (0, _chai.expect)(actions).to.deep.equal([{ appName: 'Blah', type: '__FRINT_INIT__' }, { appName: 'Blah', type: 'INCREMENT_COUNTER' }]);

    subscription.unsubscribe();
  });

  it('dispatches async actions, with deps argument', function () {
    var actions = [];
    var Store = (0, _createStore2.default)({
      enableLogger: false,
      deps: { foo: 'bar' },
      initialState: {
        counter: 0
      },
      reducer: function reducer(state, action) {
        actions.push(action);

        switch (action.type) {
          case 'INCREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter + 1
            });
          case 'DECREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter - 1
            });
          default:
            return state;
        }
      }
    });
    var store = new Store();

    var states = [];
    var subscription = store.getState$().subscribe(function (state) {
      states.push(state);
    });

    store.dispatch({ type: 'INCREMENT_COUNTER' });
    store.dispatch(function (dispatch, getState, deps) {
      dispatch({
        type: 'INCREMENT_COUNTER',
        deps: deps
      });
    });
    store.dispatch({ type: 'DECREMENT_COUNTER' });

    (0, _chai.expect)(actions).to.deep.equal([{ type: '__FRINT_INIT__' }, { type: 'INCREMENT_COUNTER' }, { type: 'INCREMENT_COUNTER', deps: { foo: 'bar' } }, { type: 'DECREMENT_COUNTER' }]);

    (0, _chai.expect)(states.length).to.equal(4);
    (0, _chai.expect)(states).to.deep.equal([{ counter: 0 }, { counter: 1 }, { counter: 2 }, { counter: 1 }]);

    subscription.unsubscribe();
  });

  it('destroys internal subscription', function () {
    var Store = (0, _createStore2.default)({
      enableLogger: false,
      epic: function epic(action$) {
        return _filter.filter.call(action$, function (action) {
          return action.type === 'PING';
        });
      },
      initialState: {
        counter: 0
      }
    });
    var store = new Store();

    var changesCount = 0;
    var subscription = store.getState$().subscribe(function () {
      changesCount += 1;
    });

    store.dispatch({ type: 'DO_SOMETHING' });
    (0, _chai.expect)(changesCount).to.equal(2); // 1 initial + 1 dispatch

    store.destroy();

    store.dispatch({ type: 'DO_SOMETHING_IGNORED' });
    (0, _chai.expect)(changesCount).to.equal(2); // will stop at 2

    subscription.unsubscribe();
  });

  it('logs state changes', function () {
    var consoleCalls = [];
    var fakeConsole = {
      group: function group() {},
      groupEnd: function groupEnd() {},
      log: function log() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        consoleCalls.push({ method: 'log', args: args });
      }
    };

    var Store = (0, _createStore2.default)({
      enableLogger: true,
      console: fakeConsole,
      initialState: {
        counter: 0
      },
      reducer: function reducer(state, action) {
        switch (action.type) {
          case 'INCREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter + 1
            });
          case 'DECREMENT_COUNTER':
            return Object.assign({}, {
              counter: state.counter - 1
            });
          default:
            return state;
        }
      }
    });
    var store = new Store();

    var states = [];
    var subscription = store.getState$().subscribe(function (state) {
      states.push(state);
    });

    store.dispatch({ type: 'INCREMENT_COUNTER' });
    store.dispatch({ type: 'INCREMENT_COUNTER' });
    store.dispatch({ type: 'DECREMENT_COUNTER' });

    (0, _chai.expect)(states.length).to.equal(4); // 1 initial + 3 dispatches
    (0, _chai.expect)(states).to.deep.equal([{ counter: 0 }, { counter: 1 }, { counter: 2 }, { counter: 1 }]);

    (0, _chai.expect)(consoleCalls.length).to.equal(12); // (1 init + 3 actions) * 3 logs (prev + action + current)
    (0, _chai.expect)(consoleCalls[3].args[2]).to.deep.equal({ counter: 0 }); // prev
    (0, _chai.expect)(consoleCalls[4].args[2]).to.deep.equal({ type: 'INCREMENT_COUNTER' }); // action
    (0, _chai.expect)(consoleCalls[5].args[2]).to.deep.equal({ counter: 1 }); // action

    subscription.unsubscribe();
  });

  it('logs errors from reducers', function () {
    var consoleCalls = [];
    var fakeConsole = {
      group: function group() {},
      groupEnd: function groupEnd() {},
      log: function log() {
        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        consoleCalls.push({ method: 'log', args: args });
      },
      error: function error() {
        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        consoleCalls.push({ method: 'error', args: args });
      }
    };

    var Store = (0, _createStore2.default)({
      enableLogger: true,
      console: fakeConsole,
      initialState: {
        counter: 0
      },
      reducer: function reducer(state, action) {
        switch (action.type) {
          case 'DO_SOMETHING':
            throw new Error('Something went wrong...');
          default:
            return state;
        }
      }
    });
    var store = new Store();

    var subscription = store.getState$().subscribe(function () {});

    store.dispatch({ type: 'DO_SOMETHING' });

    (0, _chai.expect)(consoleCalls.length).to.equal(5); // 3 init + 2 errors

    (0, _chai.expect)(consoleCalls[3].method).to.equal('error');
    (0, _chai.expect)(consoleCalls[3].args[0]).to.exist.and.to.contain('Error processing @').and.to.contain('DO_SOMETHING');

    (0, _chai.expect)(consoleCalls[4].method).to.equal('error');
    (0, _chai.expect)(consoleCalls[4].args[0]).to.exist.and.be.instanceof(Error).and.have.property('message', 'Something went wrong...');

    subscription.unsubscribe();
  });

  describe('handles combined reducers', function () {
    function counterReducer() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { value: 0 };
      var action = arguments[1];

      switch (action.type) {
        case 'INCREMENT_COUNTER':
          return Object.assign({}, {
            value: state.value + 1
          });
        case 'DECREMENT_COUNTER':
          return Object.assign({}, {
            value: state.value - 1
          });
        default:
          return state;
      }
    }

    function colorReducer() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { value: 'blue' };
      var action = arguments[1];

      switch (action.type) {
        case 'SET_COLOR':
          return Object.assign({}, {
            value: action.color
          });
        default:
          return state;
      }
    }

    var rootReducer = (0, _combineReducers2.default)({
      counter: counterReducer,
      color: colorReducer
    });

    it('with given initial state', function () {
      var Store = (0, _createStore2.default)({
        enableLogger: false,
        initialState: {
          counter: {
            value: 100
          },
          color: {
            value: 'red'
          }
        },
        reducer: rootReducer
      });
      var store = new Store();

      var states = [];
      var subscription = store.getState$().subscribe(function (state) {
        states.push(state);
      });

      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'DECREMENT_COUNTER' });
      store.dispatch({ type: 'SET_COLOR', color: 'green' });

      (0, _chai.expect)(states).to.deep.equal([{ counter: { value: 100 }, color: { value: 'red' } }, // initial
      { counter: { value: 101 }, color: { value: 'red' } }, // INCREMENT_COUNTER
      { counter: { value: 102 }, color: { value: 'red' } }, // INCREMENT_COUNTER
      { counter: { value: 101 }, color: { value: 'red' } }, // DECREMENT_COUNTER
      { counter: { value: 101 }, color: { value: 'green' } // SET_COLOR
      }]);

      subscription.unsubscribe();
    });

    it('with no given initial state', function () {
      var Store = (0, _createStore2.default)({
        enableLogger: false,
        reducer: rootReducer
      });
      var store = new Store();

      var states = [];
      var subscription = store.getState$().subscribe(function (state) {
        states.push(state);
      });

      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'DECREMENT_COUNTER' });
      store.dispatch({ type: 'SET_COLOR', color: 'green' });

      (0, _chai.expect)(states).to.deep.equal([{ counter: { value: 0 }, color: { value: 'blue' } }, // initial
      { counter: { value: 1 }, color: { value: 'blue' } }, // INCREMENT_COUNTER
      { counter: { value: 2 }, color: { value: 'blue' } }, // INCREMENT_COUNTER
      { counter: { value: 1 }, color: { value: 'blue' } }, // DECREMENT_COUNTER
      { counter: { value: 1 }, color: { value: 'green' } // SET_COLOR
      }]);

      subscription.unsubscribe();
    });

    it('with partially given initial state for certain reducers', function () {
      var Store = (0, _createStore2.default)({
        enableLogger: false,
        initialState: {
          counter: {
            value: 100
          }
        },
        reducer: rootReducer
      });
      var store = new Store();

      var states = [];
      var subscription = store.getState$().subscribe(function (state) {
        states.push(state);
      });

      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'INCREMENT_COUNTER' });
      store.dispatch({ type: 'DECREMENT_COUNTER' });
      store.dispatch({ type: 'SET_COLOR', color: 'green' });

      (0, _chai.expect)(states).to.deep.equal([{ counter: { value: 100 }, color: { value: 'blue' } }, // initial
      { counter: { value: 101 }, color: { value: 'blue' } }, // INCREMENT_COUNTER
      { counter: { value: 102 }, color: { value: 'blue' } }, // INCREMENT_COUNTER
      { counter: { value: 101 }, color: { value: 'blue' } }, // DECREMENT_COUNTER
      { counter: { value: 101 }, color: { value: 'green' } // SET_COLOR
      }]);

      subscription.unsubscribe();
    });
  });

  it('creates Store with epics', function (done) {
    var _context2;

    // constants
    var PING = 'PING';
    var PONG = 'PONG';

    var INITIAL_STATE = {
      isPinging: false
    };

    // reducers
    function pingReducer() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;
      var action = arguments[1];

      switch (action.type) {
        case PING:
          return {
            isPinging: true
          };

        case PONG:
          return {
            isPinging: false
          };

        default:
          return state;
      }
    }

    var rootReducer = (0, _combineReducers2.default)({
      ping: pingReducer
    });

    // epics
    function pingEpic$(action$) {
      var _context;

      return (_context = (_context = _filter.filter.call(action$, function (action) {
        return action.type === PING;
      }), _delay.delay).call(_context, 10), _map.map).call(_context, function () {
        return { type: PONG };
      });
    }

    var rootEpic$ = (0, _combineEpics2.default)(pingEpic$);

    // Store
    var Store = (0, _createStore2.default)({
      enableLogger: false,
      reducer: rootReducer,
      epic: rootEpic$
    });

    var store = new Store();

    (0, _chai.expect)(store.getState().ping.isPinging).to.equal(false);

    (_context2 = (_context2 = (_context2 = store.getState$(), _take.take).call(_context2, 3), _scan.scan).call(_context2, function (acc, curr) {
      acc.push({ isPinging: curr.ping.isPinging });

      return acc;
    }, []), _last.last).call(_context2).subscribe(function (pingStates) {
      (0, _chai.expect)(pingStates).to.deep.equal([{ isPinging: false }, // initial state
      { isPinging: true }, // after PING
      { isPinging: false }] // after PING has dispatched PONG
      );

      done();
    });

    store.dispatch({ type: PING });
  });
});