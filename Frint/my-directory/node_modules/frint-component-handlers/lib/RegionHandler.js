'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isEqual = require('lodash/isEqual');

var _isEqual2 = _interopRequireDefault(_isEqual);

var _zipWith = require('lodash/zipWith');

var _zipWith2 = _interopRequireDefault(_zipWith);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global window */
/* eslint-disable no-console */
exports.default = {
  getInitialData: function getInitialData() {
    return {
      list: [], // array of apps ==> { name, instance }
      listForRendering: [] // array of {name, Component} objects
    };
  },
  sendProps: function sendProps(appInstance, props) {
    var regionService = appInstance.get(appInstance.options.providerNames.region);

    if (!regionService) {
      return;
    }

    regionService.emit(props);
  },
  beforeMount: function beforeMount() {
    var _this = this;

    var rootApp = !this.app ? window.app // @TODO: can we avoid globals?
    : this.app.getRootApp();

    if (!rootApp) {
      return;
    }

    this.rootApp = rootApp;
    var apps$ = rootApp.getApps$(this.getProp('name'), this.getProp('uniqueKey'));

    this._subscription = apps$.subscribe({
      next: function next(list) {
        _this.setDataWithCallback('list', list, function () {
          _this.getData('list').forEach(function (item) {
            var appName = item.name,
                appWeight = item.weight,
                multi = item.multi;

            var isPresent = _this.getData('listForRendering').some(function (w) {
              return w.name === appName;
            });

            // @TODO: take care of removal in streamed list too?

            if (isPresent) {
              return;
            }

            var regionArgs = _this.getProp('uniqueKey') ? [_this.getProp('name'), _this.getProp('uniqueKey')] : [_this.getProp('name')];

            if (_this.getProp('uniqueKey') && !rootApp.hasAppInstance.apply(rootApp, [appName].concat(regionArgs))) {
              rootApp.instantiateApp.apply(rootApp, [appName].concat(regionArgs));
            }

            var appInstance = rootApp.getAppInstance.apply(rootApp, [appName].concat(regionArgs));
            if (appInstance) {
              _this.sendProps(appInstance, {
                name: _this.getProp('name'),
                uniqueKey: _this.getProp('uniqueKey'),
                data: _this.getProp('data')
              });
            }

            _this.setData('listForRendering', _this.getData('listForRendering').concat({
              name: appName,
              weight: appWeight,
              instance: appInstance,
              multi: multi,
              Component: _this.getMountableComponent(appInstance)
            }).sort(function (a, b) {
              return a.weight - b.weight;
            }));
          });
        });
      },
      error: function error(err) {
        console.warn('Subscription error for <Region name="' + _this.name + '" />:', err);
      }
    });
  },
  shouldUpdate: function shouldUpdate(nextProps, nextData) {
    var shouldUpdate = !(0, _isEqual2.default)(this.getProps(), nextProps);

    if (!shouldUpdate) {
      var listForRendering = nextData.listForRendering;

      shouldUpdate = shouldUpdate || this.getData('listForRendering').length !== listForRendering.length;
      shouldUpdate = shouldUpdate || (0, _zipWith2.default)(this.getData('listForRendering'), listForRendering, function (a, b) {
        return a.name === b.name;
      }).some(function (value) {
        return !value;
      });
    }

    return shouldUpdate;
  },
  afterUpdate: function afterUpdate() {
    var _this2 = this;

    var newProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    var _ref = newProps || {},
        _ref$name = _ref.name,
        name = _ref$name === undefined ? this.getProp('name') : _ref$name,
        _ref$uniqueKey = _ref.uniqueKey,
        uniqueKey = _ref$uniqueKey === undefined ? this.getProp('uniqueKey') : _ref$uniqueKey,
        _ref$data = _ref.data,
        data = _ref$data === undefined ? this.getProp('data') : _ref$data;

    this.getData('listForRendering').filter(function (item) {
      return item.instance;
    }).forEach(function (item) {
      return _this2.sendProps(item.instance, {
        name: name,
        uniqueKey: uniqueKey,
        data: data
      });
    });
  },
  beforeDestroy: function beforeDestroy() {
    var _this3 = this;

    if (this._subscription) {
      this._subscription.unsubscribe();
    }

    if (this.rootApp) {
      this.getData('listForRendering').filter(function (item) {
        return item.multi;
      }).forEach(function (item) {
        _this3.rootApp.destroyApp(item.name, _this3.getProp('name'), _this3.getProp('uniqueKey'));
      });
    }
  }
};
module.exports = exports['default'];