'use strict';

var _chai = require('chai');

var _frint = require('frint');

var _frintComponentUtils = require('frint-component-utils');

var _RegionHandler = require('./RegionHandler');

var _RegionHandler2 = _interopRequireDefault(_RegionHandler);

var _RegionService = require('./RegionService');

var _RegionService2 = _interopRequireDefault(_RegionService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('frint-component-handlers â€º RegionHandler', function () {
  var RootApp = (0, _frint.createApp)({
    name: 'MyRootApp',
    providers: [{
      name: 'component',
      useValue: 'MyRootAppComponent'
    }]
  });

  var ChildApp1 = (0, _frint.createApp)({
    name: 'MyChildApp1',
    providers: [{
      name: 'component',
      useValue: 'MyChildApp1Component'
    }, {
      name: 'region',
      useClass: _RegionService2.default
    }]
  });

  var ChildApp2 = (0, _frint.createApp)({
    name: 'MyChildApp2',
    providers: [{
      name: 'component',
      useValue: 'MyChildApp2Component'
    }]
  });

  it('is an object', function () {
    (0, _chai.expect)(_RegionHandler2.default).to.be.an('object');
  });

  it('updates list with components', function () {
    var app = new RootApp();
    app.registerApp(ChildApp1, {
      regions: ['sidebar'],
      weight: 5
    });
    app.registerApp(ChildApp2, {
      regions: ['sidebar'],
      weight: 10
    });

    var handler = (0, _frintComponentUtils.composeHandlers)({
      _data: {},
      _props: {},
      setData: function setData(key, value) {
        this._data[key] = value;
      },
      getData: function getData(key) {
        return this._data[key];
      },
      getProp: function getProp(key) {
        return this.getProps()[key];
      },
      getProps: function getProps() {
        return this._props;
      }
    }, _RegionHandler2.default, {
      app: app
    });

    handler._data = handler.getInitialData();
    handler._props = {
      name: 'sidebar'
    };

    handler.beforeMount();
    handler.afterMount();
    handler.afterUpdate();
    handler.afterUpdate({
      name: 'sidebar'
    });
    handler.beforeDestroy();

    (0, _chai.expect)(handler.getData('listForRendering').length).to.equal(2);
  });

  it('updates list with multi-instance app components', function () {
    var app = new RootApp();
    app.registerApp(ChildApp1, {
      regions: ['sidebar'],
      multi: true
    });

    var handler = (0, _frintComponentUtils.composeHandlers)({
      _data: {},
      _props: {},
      setData: function setData(key, value) {
        this._data[key] = value;
      },
      getData: function getData(key) {
        return this._data[key];
      },
      getProp: function getProp(key) {
        return this.getProps()[key];
      },
      getProps: function getProps() {
        return this._props;
      }
    }, _RegionHandler2.default, {
      app: app
    });

    handler._data = handler.getInitialData();
    handler._props = {
      name: 'sidebar',
      uniqueKey: 'sidebar-1'
    };

    handler.beforeMount();
    handler.afterMount();
    handler.afterUpdate();
    handler.afterUpdate({
      name: 'sidebar',
      uniqueKey: 'sidebar-1'
    });
    handler.beforeDestroy();

    (0, _chai.expect)(handler.getData('listForRendering').length).to.equal(1);
  });
}); /* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */