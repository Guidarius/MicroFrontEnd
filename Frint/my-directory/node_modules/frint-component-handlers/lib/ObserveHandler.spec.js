'use strict';

var _chai = require('chai');

var _of = require('rxjs/observable/of');

var _frintComponentUtils = require('frint-component-utils');

var _ObserveHandler = require('./ObserveHandler');

var _ObserveHandler2 = _interopRequireDefault(_ObserveHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */
describe('frint-component-handlers â€º ObserveHandler', function () {
  it('is an object', function () {
    (0, _chai.expect)(_ObserveHandler2.default).to.be.an('object');
  });

  it('streams props from getProps$', function () {
    var app = {
      getName: function getName() {
        return 'MyAppName';
      }
    };

    var handler = (0, _frintComponentUtils.composeHandlers)({
      _data: {},
      setData: function setData(key, value) {
        this._data[key] = value;
      },
      getData: function getData(key) {
        return this._data[key];
      }
    }, _ObserveHandler2.default, {
      getProps$: function getProps$(a) {
        return (0, _of.of)({
          appName: a.getName()
        });
      },
      app: app
    });

    (0, _chai.expect)(handler.getInitialData()).to.deep.equal({
      computedProps: {}
    });

    handler.beforeMount();
    handler.afterMount();
    handler.beforeDestroy();

    (0, _chai.expect)(handler.getData('computedProps')).to.deep.equal({
      appName: 'MyAppName'
    });
  });

  it('handles gracefully when no getProps$ is available', function () {
    var handler = (0, _frintComponentUtils.composeHandlers)({
      _data: {},
      getData: function getData(key) {
        return this._data[key];
      }
    }, _ObserveHandler2.default, {
      app: {}
    });

    handler._data = handler.getInitialData();
    handler.beforeMount();
    handler.afterMount();
    handler.beforeDestroy();

    (0, _chai.expect)(handler.getData('computedProps')).to.deep.equal({});
  });
});