'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = streamProps;

var _isPlainObject = require('lodash/isPlainObject');

var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

var _of = require('rxjs/observable/of');

var _merge = require('rxjs/observable/merge');

var _concatMap = require('rxjs/operator/concatMap');

var _scan = require('rxjs/operator/scan');

var _isObservable = require('./isObservable');

var _isObservable2 = _interopRequireDefault(_isObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Streamer = function () {
  function Streamer() {
    var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Streamer);

    this._observables = [(0, _of.of)(defaults)];
  }

  _createClass(Streamer, [{
    key: '_push',
    value: function _push(observable) {
      this._observables.push(observable);
    }
  }, {
    key: 'set',
    value: function set(value) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // (key, value)
      if (typeof value === 'string') {
        return this.setKey(value, args[0]);
      }

      // (plainObject)
      if ((0, _isPlainObject2.default)(value)) {
        return this.setPlainObject(value);
      }

      // (observable$, ...mapperFns)
      if ((0, _isObservable2.default)(value)) {
        return this.setObservable.apply(this, [value].concat(args));
      }

      return this;
    }
  }, {
    key: 'setKey',
    value: function setKey(key, value) {
      this._push((0, _of.of)(_defineProperty({}, key, value)));

      return this;
    }
  }, {
    key: 'setPlainObject',
    value: function setPlainObject(object) {
      this._push((0, _of.of)(object));

      return this;
    }
  }, {
    key: 'setObservable',
    value: function setObservable(object$) {
      var mappedObject$ = object$;

      for (var _len2 = arguments.length, mappers = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        mappers[_key2 - 1] = arguments[_key2];
      }

      mappers.forEach(function (mapperFn) {
        var _context;

        mappedObject$ = (_context = mappedObject$, _concatMap.concatMap).call(_context, function (object) {
          var result = mapperFn(object);

          if ((0, _isObservable2.default)(result)) {
            return result;
          }

          return (0, _of.of)(result);
        });
      });

      this._push(mappedObject$);

      return this;
    }
  }, {
    key: 'setDispatch',
    value: function setDispatch(actions, store) {
      var object = {};

      Object.keys(actions).forEach(function (propKey) {
        var actionFn = actions[propKey];

        object[propKey] = function () {
          return store.dispatch(actionFn.apply(undefined, arguments));
        };
      });

      this._push((0, _of.of)(object));

      return this;
    }
  }, {
    key: 'get$',
    value: function get$() {
      var _context2;

      return (_context2 = _merge.merge.apply(undefined, _toConsumableArray(this._observables)), _scan.scan).call(_context2, function (props, emitted) {
        return _extends({}, props, emitted);
      });
    }
  }]);

  return Streamer;
}();

function streamProps() {
  var defaultProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return new Streamer(defaultProps);
}
module.exports = exports['default'];