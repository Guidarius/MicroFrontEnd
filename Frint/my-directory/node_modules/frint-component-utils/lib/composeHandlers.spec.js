'use strict';

var _chai = require('chai');

var _composeHandlers = require('./composeHandlers');

var _composeHandlers2 = _interopRequireDefault(_composeHandlers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/no-extraneous-dependencies, func-names */
/* global describe, it */
describe('frint-component-utils â€º composeHandlers', function () {
  it('is a function', function () {
    (0, _chai.expect)(_composeHandlers2.default).to.be.a('function');
  });

  it('composes with default options', function () {
    var handler = (0, _composeHandlers2.default)();

    (0, _chai.expect)(handler.beforeMount).to.be.a('function');
    (0, _chai.expect)(handler.afterMount).to.be.a('function');
  });

  it('composes by overriding default handler', function () {
    var handler = (0, _composeHandlers2.default)({
      counter: 0,
      increment: function increment() {
        this.counter = this.counter + 1;
      },
      beforeMount: function beforeMount() {
        this.increment();
        return 'beforeMount';
      },
      someOtherMethod: function someOtherMethod() {
        this.increment();
        return 'someOtherMethod';
      },
      getCounter: function getCounter() {
        return this.counter;
      }
    });

    (0, _chai.expect)(handler.beforeMount()).to.equal('beforeMount');
    (0, _chai.expect)(handler.someOtherMethod()).to.equal('someOtherMethod');
    (0, _chai.expect)(handler.counter).to.equal(2);
    (0, _chai.expect)(handler.getCounter()).to.equal(2);
  });

  it('composes with multiple handlers', function () {
    var firstHandler = {
      counter: 0,
      increment: function increment() {
        /* istanbul ignore next */
        this.counter = this.counter + 1;
      },
      beforeMount: function beforeMount() {
        this.increment();
        return 'beforeMount';
      },
      someOtherMethod: function someOtherMethod() {
        this.increment();
        return 'someOtherMethod';
      },
      getCounter: function getCounter() {
        return this.counter;
      }
    };

    var secondHandler = {
      increment: function increment() {
        this.counter = this.counter + 2;
      }
    };

    var handlerInstance = (0, _composeHandlers2.default)(firstHandler, secondHandler);

    (0, _chai.expect)(handlerInstance.beforeMount()).to.equal('beforeMount');
    (0, _chai.expect)(handlerInstance.someOtherMethod()).to.equal('someOtherMethod');
    (0, _chai.expect)(handlerInstance.counter).to.equal(4);
    (0, _chai.expect)(handlerInstance.getCounter()).to.equal(4);

    var anotherHandlerInstance = (0, _composeHandlers2.default)(firstHandler, secondHandler);
    (0, _chai.expect)(anotherHandlerInstance.counter).to.equal(0);

    (0, _chai.expect)(handlerInstance.counter).to.equal(4);
  });
});