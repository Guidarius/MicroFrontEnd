'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetDOM = resetDOM;
exports.takeOverConsole = takeOverConsole;

var _jsdom = require('jsdom');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function resetDOM() {
  global.document = (0, _jsdom.jsdom)('<html><body><div id="root"></div></body></html>');
  global.window = global.document.defaultView;
  global.location = global.window.location;
  global.navigator = { userAgent: 'node.js' };
  global.requestAnimationFrame = function requestAnimationFrame(callback) {
    setTimeout(callback, 0);
  };

  /*
  Temporary fix for chai's expect(plainObject1).to.include(plainObject2) to work.
  Until these are solved:
  - https://github.com/chaijs/type-detect/pull/91
  - https://github.com/chaijs/type-detect/issues/98
  */
  global.HTMLElement = global.window.HTMLElement;
}

function takeOverConsole(console) {
  var hijackedFns = {};

  function intercept(method, fn) {
    var original = console[method];
    console[method] = function () {
      // eslint-disable-line
      fn(function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var f = args[0];

        if (typeof f !== 'undefined') {
          original.apply(console, args);
        }
      }, arguments); // eslint-disable-line
    };
    return original;
  }

  ['log', 'warn', 'error'].forEach(function (method) {
    hijackedFns[method] = intercept(method, function (through, _ref) {
      var _ref2 = _toArray(_ref),
          firstArg = _ref2[0],
          rest = _ref2.slice(1);

      if (typeof firstArg === 'string' && firstArg.startsWith('[DEPRECATED]')) {
        return;
      }
      through.apply(undefined, [firstArg].concat(_toConsumableArray(rest)));
    });
  });

  return function reset() {
    Object.keys(hijackedFns).forEach(function (method) {
      console[method] = hijackedFns[method];
    });
  };
}