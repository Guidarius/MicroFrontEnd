'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable import/no-extraneous-dependencies, func-names, no-new, class-methods-use-this */
/* global describe, it */


var _chai = require('chai');

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _createApp = require('./createApp');

var _createApp2 = _interopRequireDefault(_createApp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

describe('frint  â€º App', function () {
  it('throws error when creating new instance without name', function () {
    (0, _chai.expect)(function () {
      new _App2.default();
    }).to.throw(/Must provide `name` in options/);
  });

  it('gets option value', function () {
    var app = new _App2.default({
      name: 'MyApp'
    });

    (0, _chai.expect)(app.getName()).to.equal('MyApp');
  });

  it('gets parent and root app', function () {
    var rootApp = new _App2.default({
      name: 'RootApp'
    });

    var childApp = new _App2.default({
      name: 'ChildApp',
      parentApp: rootApp
    });

    var grandchildApp = new _App2.default({
      name: 'GrandchildApp',
      parentApp: childApp
    });

    (0, _chai.expect)(rootApp.getName()).to.equal('RootApp');
    (0, _chai.expect)(childApp.getName()).to.equal('ChildApp');
    (0, _chai.expect)(rootApp.getParentApps()).to.deep.equal([]);

    (0, _chai.expect)(childApp.getParentApp()).to.deep.equal(rootApp);
    (0, _chai.expect)(childApp.getRootApp()).to.deep.equal(rootApp);
    (0, _chai.expect)(childApp.getParentApps().map(function (x) {
      return x.options.name;
    })).to.deep.equal(['RootApp']);

    (0, _chai.expect)(grandchildApp.getParentApp()).to.deep.equal(childApp);
    (0, _chai.expect)(grandchildApp.getRootApp()).to.deep.equal(rootApp);
    (0, _chai.expect)(grandchildApp.getParentApps().map(function (x) {
      return x.options.name;
    })).to.deep.equal(['ChildApp', 'RootApp']);
  });

  it('registers providers with direct values', function () {
    var app = new _App2.default({
      name: 'MyApp',
      providers: [{ name: 'foo', useValue: 'fooValue' }]
    });

    (0, _chai.expect)(app.get('foo')).to.equal('fooValue');
  });

  it('registers providers with factory values', function () {
    var app = new _App2.default({
      name: 'MyApp',
      providers: [{ name: 'foo', useFactory: function useFactory() {
          return 'fooValue';
        } }]
    });

    (0, _chai.expect)(app.get('foo')).to.equal('fooValue');
  });

  it('registers providers with class values', function () {
    var Foo = function () {
      function Foo() {
        _classCallCheck(this, Foo);
      }

      _createClass(Foo, [{
        key: 'getValue',
        value: function getValue() {
          return 'fooValue';
        }
      }]);

      return Foo;
    }();

    var app = new _App2.default({
      name: 'MyApp',
      providers: [{ name: 'foo', useClass: Foo }]
    });

    (0, _chai.expect)(app.get('foo').getValue()).to.equal('fooValue');
  });

  it('registers providers with dependencies', function () {
    var Baz = function () {
      function Baz(_ref) {
        var foo = _ref.foo,
            bar = _ref.bar;

        _classCallCheck(this, Baz);

        this.foo = foo;
        this.bar = bar;
      }

      _createClass(Baz, [{
        key: 'getValue',
        value: function getValue() {
          return 'bazValue, ' + this.foo + ', ' + this.bar;
        }
      }]);

      return Baz;
    }();

    var app = new _App2.default({
      name: 'MyApp',
      providers: [{
        name: 'foo',
        useValue: 'fooValue'
      }, {
        name: 'bar',
        useFactory: function useFactory(_ref2) {
          var foo = _ref2.foo;

          return 'barValue, ' + foo;
        },
        deps: ['foo']
      }, {
        name: 'baz',
        useClass: Baz,
        deps: ['foo', 'bar']
      }]
    });

    (0, _chai.expect)(app.get('foo')).to.equal('fooValue');
    (0, _chai.expect)(app.get('bar')).to.equal('barValue, fooValue');
    (0, _chai.expect)(app.get('baz').getValue()).to.equal('bazValue, fooValue, barValue, fooValue');
  });

  it('returns services from Root that are cascaded', function () {
    var ServiceC = function () {
      function ServiceC() {
        _classCallCheck(this, ServiceC);
      }

      _createClass(ServiceC, [{
        key: 'getValue',
        value: function getValue() {
          return 'serviceC';
        }
      }]);

      return ServiceC;
    }();

    var Root = (0, _createApp2.default)({
      name: 'MyApp',
      providers: [{
        name: 'serviceA',
        useValue: 'serviceA',
        scoped: true,
        cascade: true
      }, {
        name: 'serviceB',
        useFactory: function useFactory() {
          return 'serviceB';
        },
        scoped: true,
        cascade: true
      }, {
        name: 'serviceC',
        useClass: ServiceC,
        cascade: true
      }, {
        name: 'serviceCScoped',
        useClass: ServiceC,
        cascade: true,
        scoped: true
      }, {
        name: 'serviceD',
        useValue: 'serviceD',
        cascade: false
      }, {
        name: 'serviceE',
        useValue: 'serviceE',
        cascade: true,
        scoped: false
      }]
    });

    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var root = new Root();
    root.registerApp(App1);

    var app = root.getAppInstance('App1');
    (0, _chai.expect)(app.get('serviceA')).to.equal('serviceA');
    (0, _chai.expect)(app.get('serviceB')).to.equal('serviceB');
    (0, _chai.expect)(app.get('serviceC').getValue()).to.equal('serviceC');
    (0, _chai.expect)(app.get('serviceD')).to.equal(null);
    (0, _chai.expect)(app.get('serviceE')).to.equal('serviceE');

    (0, _chai.expect)(app.get('serviceF')).to.equal(null);
    (0, _chai.expect)(root.get('serviceF')).to.equal(null);
  });

  it('returns null when service is non-existent in both Child App and Root', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();
    app.registerApp(App1);

    var serviceA = app.getAppInstance('App1').get('serviceA');

    (0, _chai.expect)(serviceA).to.equal(null);
  });

  it('gets container', function () {
    var app = new _App2.default({
      name: 'MyApp'
    });

    (0, _chai.expect)(app.getContainer()).to.deep.equal(app.container);
  });

  it('gets providers definition list', function () {
    var app = new _App2.default({
      name: 'MyApp',
      providers: [{ name: 'foo', useValue: 'fooValue' }]
    });

    (0, _chai.expect)(app.getProviders()).to.deep.equal([{ name: 'foo', useValue: 'fooValue' }]);
  });

  it('gets individual provider definition', function () {
    var app = new _App2.default({
      name: 'MyApp',
      providers: [{ name: 'foo', useValue: 'fooValue' }]
    });

    (0, _chai.expect)(app.getProvider('foo')).to.deep.equal({ name: 'foo', useValue: 'fooValue' });
  });

  it('calls initialize during construction, as passed in options', function () {
    var called = false;

    var app = new _App2.default({
      name: 'MyApp',
      initialize: function initialize() {
        called = true;
      }
    });

    (0, _chai.expect)(app.getName()).to.equal('MyApp');
    (0, _chai.expect)(called).to.equal(true);
  });

  it('calls beforeDestroy, as passed in options', function () {
    var called = false;

    var app = new _App2.default({
      name: 'MyApp',
      beforeDestroy: function beforeDestroy() {
        called = true;
      }
    });
    app.beforeDestroy();

    (0, _chai.expect)(app.getName()).to.equal('MyApp');
    (0, _chai.expect)(called).to.equal(true);
  });

  it('registers apps', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();

    app.registerApp(App1, {
      regions: ['sidebar']
    });

    (0, _chai.expect)(app.hasAppInstance('App1')).to.equal(true);
    (0, _chai.expect)(app.getAppInstance('App1').getOption('name')).to.equal('App1');
  });

  it('registers apps, by overriding options', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();

    app.registerApp(App1, {
      name: 'AppOne',
      regions: ['sidebar']
    });

    (0, _chai.expect)(app.hasAppInstance('AppOne')).to.equal(true);
    (0, _chai.expect)(app.getAppInstance('AppOne').getOption('name')).to.equal('AppOne');
  });

  it('registers apps', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();

    app.registerApp(App1, {
      regions: ['sidebar']
    });

    (0, _chai.expect)(app.hasAppInstance('App1')).to.equal(true);
    (0, _chai.expect)(app.getAppInstance('App1').getOption('name')).to.equal('App1');
  });

  it('streams registered apps as a collection', function (done) {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();

    app.registerApp(App1, {
      regions: ['sidebar']
    });
    var apps$ = app.getApps$();

    apps$.subscribe(function (apps) {
      (0, _chai.expect)(Array.isArray(apps)).to.equal(true);
      (0, _chai.expect)(apps.length).to.equal(1);
      (0, _chai.expect)(apps[0].name).to.equal('App1');

      done();
    });
  });

  it('streams registered apps as a collection, with region filtering', function (done) {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();

    app.registerApp(App1, {
      regions: ['sidebar']
    });
    var apps$ = app.getApps$('sidebar');

    apps$.subscribe(function (apps) {
      (0, _chai.expect)(Array.isArray(apps)).to.equal(true);
      (0, _chai.expect)(apps.length).to.equal(1);
      (0, _chai.expect)(apps[0].name).to.equal('App1');

      done();
    });
  });

  it('gets app once available (that will be available in future)', function (done) {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var root = new Root();

    root.getAppOnceAvailable$('App1').subscribe(function (app) {
      (0, _chai.expect)(app.getName()).to.equal('App1');

      done();
    });

    root.registerApp(App1);
  });

  it('gets app once available (that is already available)', function (done) {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var root = new Root();
    root.registerApp(App1);

    root.getAppOnceAvailable$('App1').subscribe(function (app) {
      (0, _chai.expect)(app.getName()).to.equal('App1');

      done();
    });
  });

  it('gets app scoped by region', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });
    var App2 = (0, _createApp2.default)({ name: 'App2' });

    var app = new Root();
    app.registerApp(App1, {
      regions: ['sidebar']
    });
    app.registerApp(App2, {
      regions: ['footer'],
      multi: true
    });

    (0, _chai.expect)(app.getAppInstance('App1')).to.be.an('object');
    (0, _chai.expect)(app.getAppInstance('App1', 'sidebar')).to.be.an('object');

    (0, _chai.expect)(app.getAppInstance('App2')).to.equal(null);
    (0, _chai.expect)(app.getAppInstance('App2', 'footer')).to.equal(null);

    app.instantiateApp('App2', 'footer', 'footer-123');
    (0, _chai.expect)(app.getAppInstance('App2', 'footer', 'footer-123')).to.be.an('object');
  });

  it('throws error when registering same App twice', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();
    app.registerApp(App1);

    (0, _chai.expect)(function () {
      app.registerApp(App1);
    }).to.throw(/App 'App1' has been already registered before/);
  });

  it('checks for app instance availability', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var App1 = (0, _createApp2.default)({ name: 'App1' });

    var app = new Root();
    (0, _chai.expect)(app.hasAppInstance('blah')).to.equal(false);

    app.registerApp(App1);
    (0, _chai.expect)(app.hasAppInstance('App1')).to.equal(true);
  });

  it('throws error when trying to instantiate non-existent App', function () {
    var Root = (0, _createApp2.default)({ name: 'MyApp' });
    var app = new Root();

    (0, _chai.expect)(function () {
      app.instantiateApp('blah');
    }).to.throw(/No app found with name 'blah'/);
  });
});