'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _BehaviorSubject = require('rxjs/BehaviorSubject');

var _of = require('rxjs/observable/of');

var _concatMap = require('rxjs/operator/concatMap');

var _find = require('rxjs/operator/find');

var _map = require('rxjs/operator/map');

var _first = require('rxjs/operator/first');

var _omit = require('lodash/omit');

var _omit2 = _interopRequireDefault(_omit);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _findIndex = require('lodash/findIndex');

var _findIndex2 = _interopRequireDefault(_findIndex);

var _travixDi = require('travix-di');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function makeInstanceKey() {
  var region = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var regionKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var multi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!multi || !region && !regionKey) {
    return 'default';
  }

  var key = '';

  if (region) {
    key = region;
  }

  if (regionKey) {
    key = region + '_' + regionKey;
  }

  return key;
}

function App() {
  var _this = this;

  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  this.options = _extends({
    name: null,
    parentApp: null,
    providers: [],

    providerNames: {
      component: 'component',
      container: 'container',
      store: 'store',
      app: 'app',
      parentApp: 'parentApp',
      rootApp: 'rootApp',
      region: 'region'
    },

    // lifecycle callbacks
    initialize: function initialize() {},
    beforeDestroy: function beforeDestroy() {}

  }, opts);

  // errors
  if (!this.options.name) {
    throw new Error('Must provide `name` in options');
  }

  // container
  var Container = (0, _travixDi.createContainer)([{ name: this.options.providerNames.app, useDefinedValue: this }, { name: this.options.providerNames.parentApp, useDefinedValue: this.getParentApp() }, { name: this.options.providerNames.rootApp, useDefinedValue: this.getRootApp() }], {
    containerKey: this.options.providerNames.container
  });
  this.container = (0, _travixDi.resolveContainer)(Container);

  // root app's providers
  this._registerRootProviders();

  // self providers
  this.options.providers.forEach(function (provider) {
    _this.container.register(provider);
  });

  // children - create Observable if root
  this._appsCollection = [];
  this._apps$ = new _BehaviorSubject.BehaviorSubject(this._appsCollection);

  this.options.initialize.bind(this)();
}

App.prototype._registerRootProviders = function _registerRootProviders() {
  var _this2 = this;

  var parentApps = this.getParentApps();

  if (parentApps.length === 0) {
    return;
  }

  parentApps.reverse().forEach(function (parentApp) {
    parentApp.getProviders().forEach(function (parentProvider) {
      // do not cascade
      if (!parentProvider.cascade) {
        return;
      }

      var definedProvider = Object.assign({}, (0, _omit2.default)(parentProvider, ['useClass', 'useValue', 'useFactory']));

      // non-scoped
      if (!parentProvider.scoped) {
        _this2.container.register(_extends({}, definedProvider, {
          useValue: parentApp.get(parentProvider.name)
        }));

        return;
      }

      // scoped
      if ('useValue' in parentProvider) {
        // `useValue` providers have no impact with scoping
        _this2.container.register(_extends({}, definedProvider, {
          useValue: parentApp.get(parentProvider.name)
        }));

        return;
      }

      if ('useClass' in parentProvider) {
        _this2.container.register(_extends({}, definedProvider, {
          useClass: parentProvider.useClass
        }));

        return;
      }

      if ('useFactory' in parentProvider) {
        _this2.container.register(_extends({}, definedProvider, {
          useFactory: parentProvider.useFactory
        }));
      }
    });
  });
};

App.prototype.getContainer = function getContainer() {
  return this.container;
};

App.prototype.getRootApp = function getRootApp() {
  var parents = this.getParentApps();

  if (parents.length === 0) {
    return this;
  }

  return parents.pop();
};

App.prototype.getParentApp = function getParentApp() {
  return this.options[this.options.providerNames.parentApp] || null;
};

App.prototype.getParentApps = function getParentApps() {
  function findParents(app) {
    var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    var parentApp = app.getParentApp();

    if (!parentApp) {
      return parents;
    }

    parents.push(parentApp);
    return findParents(parentApp, parents);
  }

  return findParents(this);
};

App.prototype.getOption = function getOption(key) {
  return (0, _get2.default)(this.options, key);
};

App.prototype.getName = function getName() {
  return this.getOption('name');
};

App.prototype.getProviders = function getProviders() {
  return this.options.providers;
};

App.prototype.getProvider = function getProvider(name) {
  return (0, _find3.default)(this.options.providers, function (p) {
    return p.name === name;
  });
};

App.prototype.get = function get(providerName) {
  var value = this.container.get(providerName);

  if (typeof value !== 'undefined') {
    return value;
  }

  return null;
};

App.prototype.getApps$ = function getApps$() {
  var _context;

  var regionName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  if (!regionName) {
    return this._apps$;
  }

  return (_context = this._apps$, _map.map).call(_context, function (collection) {
    return collection.filter(function (w) {
      return w.regions.indexOf(regionName) > -1;
    });
  });
};

App.prototype.registerApp = function registerApp(AppClass) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = _extends({
    multi: false
  }, opts);

  if (typeof options.name !== 'undefined') {
    Object.defineProperty(AppClass, 'frintAppName', {
      value: options.name,
      configurable: true
    });
  }

  var existingIndex = (0, _findIndex2.default)(this._appsCollection, function (w) {
    return w.name === AppClass.frintAppName;
  });

  if (existingIndex !== -1) {
    throw new Error('App \'' + AppClass.frintAppName + '\' has been already registered before.');
  }

  this._appsCollection.push(_extends({}, options, {
    name: AppClass.frintAppName,
    App: AppClass,
    regions: options.regions || [],
    instances: {}
  }));

  if (options.multi === false) {
    this.instantiateApp(AppClass.frintAppName);
  }

  this._apps$.next(this._appsCollection);
};

App.prototype.hasAppInstance = function hasAppInstance(name) {
  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var regionKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var instance = this.getAppInstance(name, region, regionKey);

  if (instance && typeof instance !== 'undefined') {
    return true;
  }

  return false;
};

App.prototype.getAppInstance = function getAppInstance(name) {
  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var regionKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var index = (0, _findIndex2.default)(this._appsCollection, function (w) {
    return w.name === name;
  });

  if (index === -1) {
    return null;
  }

  var w = this._appsCollection[index];
  var instanceKey = makeInstanceKey(region, regionKey, w.multi);
  var instance = w.instances[instanceKey];

  if (!instance || typeof instance === 'undefined') {
    return null;
  }

  return instance;
};

App.prototype.getAppOnceAvailable$ = function getAppOnceAvailable$(name) {
  var _context2;

  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var regionKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var rootApp = this.getRootApp();

  var w = rootApp.getAppInstance(name, region, regionKey);

  if (w) {
    return (0, _of.of)(w);
  }

  return (_context2 = (_context2 = (_context2 = (_context2 = rootApp._apps$, _concatMap.concatMap).call(_context2, function (y) {
    return y;
  }), _find.find).call(_context2, function (app) {
    return app.name === name;
  }), _map.map).call(_context2, function (x) {
    var instanceKey = makeInstanceKey(region, regionKey, x.multi);
    return x.instances[instanceKey];
  }), _first.first).call(_context2, function (y) {
    return y;
  });
};

App.prototype.instantiateApp = function instantiateApp(name) {
  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var regionKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var index = (0, _findIndex2.default)(this._appsCollection, function (w) {
    return w.App.frintAppName === name;
  });

  if (index === -1) {
    throw new Error('No app found with name \'' + name + '\'.');
  }

  var w = this._appsCollection[index];
  var key = makeInstanceKey(region, regionKey, w.multi);

  this._appsCollection[index].instances[key] = new w.App(_extends({}, (0, _omit2.default)(w, ['App', 'instances']), {
    name: w.App.frintAppName,
    parentApp: this
  }));

  return this._appsCollection[index].instances[key];
};

App.prototype.destroyApp = function destroyApp(name) {
  var region = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var regionKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var index = (0, _findIndex2.default)(this._appsCollection, function (w) {
    if (!w || !w.App) {
      return false;
    }

    return w.App.frintAppName === name;
  });

  if (index === -1) {
    throw new Error('No app found with name \'' + name + '\'.');
  }

  var w = this._appsCollection[index];
  var key = makeInstanceKey(region, regionKey, w.multi);

  if (typeof this._appsCollection[index].instances[key] === 'undefined') {
    throw new Error('No instance with key \'' + key + '\' found for app with name \'' + name + '\'.');
  }

  this._appsCollection[index].instances[key].beforeDestroy();
  delete this._appsCollection[index].instances[key];
};

App.prototype.beforeDestroy = function beforeDestroy() {
  return this.options.beforeDestroy.bind(this)();
};

// unregisterApp(name, region = null, regionKey = null) {
//   // @TODO
// }

exports.default = App;
module.exports = exports['default'];