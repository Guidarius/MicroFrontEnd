'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createContainer;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function createContainer() {
  var providers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = _extends({
    containerName: 'container'
  }, opts);

  var Container = function () {
    function Container() {
      var _this = this;

      _classCallCheck(this, Container);

      // name ==> instance
      this.registry = {};
      Object.defineProperty(this.registry, options.containerName, {
        get: function get() {
          return _this;
        }
      });

      providers.forEach(function (provider) {
        _this.register(provider);
      });
    }

    _createClass(Container, [{
      key: 'getDeps',
      value: function getDeps(provider) {
        var _this2 = this;

        var name = provider.name;

        var depsInstances = {};

        if (Array.isArray(provider.deps)) {
          provider.deps.forEach(function (depName) {
            if (!(depName in _this2.registry)) {
              throw new Error('For provider \'' + name + '\', dependency \'' + depName + '\' is not available yet.');
            }

            depsInstances[depName] = _this2.registry[depName];
          });
        } else if (_typeof(provider.deps) === 'object') {
          Object.keys(provider.deps).forEach(function (containerDepName) {
            if (!(containerDepName in _this2.registry)) {
              throw new Error('For provider \'' + name + '\', dependency \'' + containerDepName + '\' is not available yet.');
            }

            var targetDepName = provider.deps[containerDepName];
            depsInstances[targetDepName] = _this2.registry[containerDepName];
          });
        }

        return depsInstances;
      }
    }, {
      key: 'register',
      value: function register(provider) {
        if (typeof provider.name !== 'string') {
          throw new Error('Provider has no \'name\' key.');
        }

        var name = provider.name;


        if ('useValue' in provider) {
          this.registry[name] = provider.useValue;
        } else if ('useFactory' in provider) {
          this.registry[name] = provider.useFactory(this.getDeps(provider));
        } else if ('useClass' in provider) {
          this.registry[name] = new provider.useClass(this.getDeps(provider));
        } else if ('useDefinedValue' in provider) {
          Object.defineProperty(this.registry, name, {
            get: function get() {
              return provider.useDefinedValue;
            }
          });
        } else {
          throw new Error('No value given for \'' + name + '\' provider.');
        }
      }
    }, {
      key: 'get',
      value: function get(name) {
        return this.registry[name];
      }
    }]);

    return Container;
  }();

  return Container;
}